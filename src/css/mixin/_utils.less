// 工具样式  不使用前缀
/*
cubic-bezier(0.1, 0.3, 0.5, 1) 惯性滚动函数
 */

.black {
  color: #666 !important;
  background-color: #666 !important;
}
.green {
  color: @color-green !important;
  background-color: @color-green !important;
}
.blue {
  color: @color-blue !important;
  background-color: @color-blue !important;
}
.pink {
  color: @color-pink !important;
  background-color: @color-pink !important;
}
.green2 {
  color: @color-green2 !important;
  background-color: @color-green2 !important;
}
.red {
  color: @color-red !important;
  background-color: @color-red !important;
}
.yellow {
  color: @color-yellow !important;
  background-color: @color-yellow !important;
}
.border{
  border:  @default-border;
}

.ui-middle-outter {
  display: table;
  width: 100%;
  height: inherit;
}
.ui-middle-inner {
  display: table-cell;
  vertical-align: middle;
  height: inherit;
}
.ui-middle {
  height: inherit;
  display: inline-block;
  vertical-align: middle;
  &:after {
    content: '';
    display: inline-block;
    vertical-align: middle;
    width: 0;
    overflow: hidden;
    height: 100%;
  }
}
.ui-middle-wrapper{
  height: 100%;
  width: 100%;
}
.fl {
  float: left;
}
.fr {
  float: right;
}
.fb{
  font-weight: bold;
}
.fn{
  font-weight: normal;
}

.tc {
  text-align: center;
}
.tl {
  text-align: left;
}
.tr {
  text-align: right;
}
.ib {
  display: inline-block;
}
.show {
  display: block !important;
}
.hidden {
  display: none !important;
}
.invisible {
  visibility: hidden;
}
.clearflash {
  -webkit-user-select: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}
.clearfix {
  *zoom: 1;
}
.clearflash {
  -webkit-user-select: none;
}
.clearfix:before,
.clearfix:after {
  display: table;
  content: " ";
  line-height: 0;
}
.clearfix:after {
  clear: both;
}
//文本溢出 省略号
.text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
// margin
.make_margin(@i) {
  .m@{i} {
    margin: @i*0.1em !important;
  }
  .mt@{i} {
    margin-top: @i*0.1em !important;
  }
  .mb@{i} {
    margin-bottom: @i*0.1em !important;
  }
  .ml@{i} {
    margin-left: @i*0.1em !important;
  }
  .mr@{i} {
    margin-right: @i*0.1em !important;
  }
}
//padding
.make_padding(@i) {
  .p@{i} {
    padding: @i*0.1em !important;
  }
  .pt@{i} {
    padding-top: @i*0.1em !important;
  }
  .pb@{i} {
    padding-bottom: @i*0.1em !important;
  }
  .pl@{i} {
    padding-left: @i*0.1em !important;
  }
  .pr@{i} {
    padding-right: @i*0.1em !important;
  }
}
//font-size
.f(@i:1rem) {
  font-size: @i*1rem !important;
}
//输出外边距  m5,m10,...  em 为单位  m5表示 margin 0.5em
.func_margin(@n, @i:@margin-func-start) when ( @i =< @n) {
  .make_margin(@i);
  .func_margin(@n, (@i + @margin-func-step));
}
//输出内边距   p5,p10,p15...
.func_padding(@n, @i:5) when ( @i =< @n) {
  .make_padding(@i);
  .func_padding(@n, (@i + 5));
}
//输出字体大小  f5,f6,f7,f8--,f19,f20
.func-fontSize(@n, @i: @font-func-start) when (@i =< @n) {
  .f@{i} {
    font-size: @i*0.1rem !important;
  }
  .func-fontSize(@n, (@i + @font-func-step));
}
//输出 字体颜色 c1,c2,c3,c4....c16   #111 ~  #FFF
.func-color(@n, @i:1) when (@i =< @n) {
  .c@{i} {
    color: @i*#111;
  }
  .func-color(@n,(@i+1));
}
//创建方法调用
.func_margin(@margin-func-end);
.func_padding(@padding-func-end);
.func-fontSize(@font-func-end);
.func-color(15);


/*
hairline-border(@border,@radius)用来实现"retina hairline"边框，
@border参数传入border样式，如 1px solid #333,缺省值为 @default-border
@radius参数传入border-radius值，如1px,1rem,缺省值 为 0
注意： 如果引用hairline-border Mixin 方法，这个样式的定位方式会变成relative
*/
.hairline-border(@border:@default-border, @radius:0) {
  position: relative;
  &:after {
    content: " ";
    position: absolute;
    width: 200%;
    height: 200%;
    left: 0;
    top: 0;
    border: @border;
    transform: scale(0.5);
    transform-origin: 0 0;
    border-radius: @radius;
    box-sizing: border-box;
  }
}
/*
hairline-border-single(@border,@pos,@pseudo) 可以用来实现单条的"retina hairline"边框，
@border参数传入border样式，如 1px solid #333,缺省值为 @default-border
@pos参数传入位置，可以为"top/bottom/left/right",缺省值 为 top
@pseudo参数传入伪类值，可以为after或者before，所以，一个样式最多有2条单独的边框
注意：对于某一条样式 hairline-border-single hairline-border 只能同时使用一种
*/
.hairline-border-single(@border:@default-border, @pos:top, @pseudo:after) {
  position: relative;
  .pseudo(@pseudo);
  .pseudo(@pseudo) when (@pseudo=after) {
    &:after {
      .-(@pos);
      content: " ";
      position: absolute;
      border: @border;
      transform-origin: 0 0;
      box-sizing: border-box;
    }
  }
  .pseudo(@pseudo) when (@pseudo=before) {
    &:before {
      .-(@pos);
      content: " ";
      position: absolute;
      border: @border;
      transform-origin: 0 0;
      box-sizing: border-box;
    }
  }
  .-(@pos:top) when (@pos = top) {
    left: 0;
    top: 0;
    width: 100%;
    height: 0;
    transform: scaleY(0.25);
  }
  .-(@pos:top) when (@pos = bottom) {
    left: 0;
    top: 100%;
    width: 100%;
    height: 0;
    transform: scaleY(0.25);
  }
  .-(@pos:top) when (@pos = left) {
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    transform: scaleX(0.25);
  }
  .-(@pos:top) when (@pos = right) {
    left: 100%;
    top: 0;
    height: 100%;
    width: 0;
    transform: scaleX(0.25);
  }
}
@ratios:25,33,50,75,100,150,200,300;
.ratio_maker(@i:1) when (@i <= length(@ratios)){
  @ratio: extract(@ratios, @i);
  .ratio@{ratio}{
    &:after{
      display: inline-block;
      content: "";
      padding-bottom: @ratio*1%;
    }
  }
  .ratio_maker((@i+1));
}
.ratio_maker();
